#!/usr/bin/python3

"""
ZSH completion:

#compdef cabinet
#
# this is zsh completion function file.
# generated by genzshcomp(ver: 0.5.1)
#

typeset -A opt_args
local context state line

_arguments -s -S \
  "-h[show this help message and exit]:" \
  "--help[show this help message and exit]:" \
  "-r[no uploading, only generate new hash(es)]" \
  "--rehash[no uploading, only generate new hash(es)]" \
  "-n[number of generated hashes]" \
  "--hashes[number of generated hashes]" \
  "1:Expiration time:()" \
  "2::args:_files"

"""

import time
import hashlib
import base64
import subprocess
import re
import argparse
import os.path
import urllib.parse
import sys

SECRET = "---"
SERVER = "http://---{path}?key={key}&e={expire}"
SCP_PATH = "---:\"/---/%s\""

def parse_reltime_expr(reltime):
    """Parses a relative time expression in a "natural" format"""
    reltime = reltime.strip()
    g = re.match(r"^((\d+)m)?\s*((\d+)w)?\s*((\d+)d)?\s*((\d+)h?)?$", reltime, flags=re.ASCII)

    if g is None:
        if reltime.startswith("n"):
            return 100 * 365 * 86400
        raise argparse.ArgumentTypeError("Can't parse relative time '%s'" % reltime)
    reltime  = int(g.group(8) or 0) * 3600
    reltime += int(g.group(6) or 0) * 86400
    reltime += int(g.group(4) or 0) * 86400 * 7
    reltime += int(g.group(2) or 0) * 86400 * 30
    return reltime

class ZshCompletionAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        from genzshcomp import CompletionGenerator
        generator = CompletionGenerator("cabinet", parser)
        print(generator.get())
        sys.exit(0)

parser = argparse.ArgumentParser(description='Nginx secure link helper')
parser.add_argument("expire", type=parse_reltime_expr, help="relative expiration time (like 2d1h, 72h, 4d, 11, 3w, 2m). n[ever] is also valid (=100 years)")
parser.add_argument("file", metavar="FILE")
parser.add_argument("-r", "--rehash", action="store_true",help="no uploading, only generate new hash(es)")
parser.add_argument("-n", "--hashes", default=1, type=int, help="number of generated hashes")
parser.add_argument("--zsh-completion", action=ZshCompletionAction, nargs=0, help="requires genzshcomp")
args = parser.parse_args()

expire = int(time.time() + args.expire)
print("Links expire in: %dd%dh" % (args.expire // 86400, (args.expire % 86400) / 3600))

path = "/" + args.file
filename = "/" + os.path.basename(args.file)

for n in range(args.hashes):
    plain_key = (SECRET + path + str(expire+n)).encode("utf-8")
    key = hashlib.md5(plain_key).digest()
    encoded_key = base64.b64encode(key, b"-_").decode("ascii").replace("=", "")

    url = SERVER.format(path=urllib.parse.quote(filename), key=encoded_key, expire=expire+n)

    print(url)

if not args.rehash:
    subprocess.call(["scp", args.file, SCP_PATH % filename])
